#N canvas 646 25 1274 772 12;
#X declare -lib Gem;
#X obj 393 204 tgl 30 0 empty empty On/Off -2 -7 0 10 -262144 -1 -1
0 1;
#X obj 446 273 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 446 197 tempo \$1 permin;
#X floatatom 446 156 5 1 500 2 Tempo - -;
#X obj 446 311 int 1;
#X obj 528 311 + 1;
#X floatatom 446 365 5 0 8 0 - - -;
#X floatatom 446 470 5 0 0 0 - - -;
#X obj 446 436 + 1;
#X obj 446 524 sel 1;
#X obj 503 524 sel 2;
#X obj 560 524 sel 3;
#X obj 628 524 sel 4;
#X obj 690 524 sel 5;
#X obj 753 524 sel 6;
#X obj 808 524 sel 7;
#X obj 877 524 sel 8;
#X obj 446 403 % 8;
#X obj 393 239 sel 0;
#X obj 393 266 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 393 292 -1;
#X obj 325 247 loadbang;
#X text 4 15 Toggle to turn on metronome. When toggle is turned on
\, it turns on metronome and sends sequencer data. When it is turned
off \, it sends a message to the [sel 0] which resets the counter to
-1 (it becomes 0 after the [+ 1] before the senders. It also makes
it so the sequencer starts at 0 when the patch is loaded., f 25;
#X obj 446 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 503 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 560 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 628 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 690 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 753 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 808 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 877 563 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 503 598 s Two;
#X obj 560 598 s Three;
#X obj 628 598 s Four;
#X obj 690 598 s Five;
#X obj 753 598 s Six;
#X obj 808 598 s Seven;
#X obj 877 598 s Eight;
#X text 568 337 This [int] object has an infinite counter set up to
it so it just keeps counting up. The modulus operator then uses the
remainder of the integer to keep counting to eight. To change how many
steps the sequencer has \, we just have to change the modulus operator
and add more senders. There is a plus one at the end as the highest
remainder will be 7 and the lowest remainder will be zero \, but we
want 1 to 8 so we just add one.;
#X obj 442 730 receive Kick;
#X obj 602 732 receive Snare;
#X obj 773 732 receive Hat;
#X obj 442 756 bng 50 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X obj 602 758 bng 50 250 50 0 empty empty empty 17 7 0 10 -204786
-1 -1;
#X obj 773 758 bng 50 250 50 0 empty empty empty 17 7 0 10 -232576
-1 -1;
#X msg 440 824 open pdkick.wav \, 1;
#X text 3756 2001 hey dude;
#X obj 442 860 readsf~;
#X msg 602 824 open pdsnare.wav \, 1;
#X msg 773 824 open pdhat.wav \, 1;
#X obj 602 860 readsf~;
#X obj 773 860 readsf~;
#X obj 1072 167 receive One;
#X obj 1072 227 spigot;
#X obj 1072 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1111 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1072 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1176 227 spigot;
#X obj 1176 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1215 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1176 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1283 227 spigot;
#X obj 1283 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1322 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1283 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1387 227 spigot;
#X obj 1387 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1426 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1387 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1489 227 spigot;
#X obj 1489 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1528 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1489 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1593 227 spigot;
#X obj 1593 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1632 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1593 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1700 227 spigot;
#X obj 1700 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1739 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1700 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1804 227 spigot;
#X obj 1804 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1843 199 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1804 259 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1431 307 send Kick;
#X obj 1176 167 receive Two;
#X obj 1283 167 receive Three;
#X obj 1387 167 receive Four;
#X obj 1489 167 receive Five;
#X obj 1593 167 receive Six;
#X obj 1700 167 receive Seven;
#X obj 1804 167 receive Eight;
#X obj 1075 362 receive One;
#X obj 1075 422 spigot;
#X obj 1075 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1114 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1075 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1179 422 spigot;
#X obj 1179 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1218 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1179 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1286 422 spigot;
#X obj 1286 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1325 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1286 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1390 422 spigot;
#X obj 1390 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1429 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1390 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1492 422 spigot;
#X obj 1492 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1531 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1492 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1596 422 spigot;
#X obj 1596 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1635 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1596 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1703 422 spigot;
#X obj 1703 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1742 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1703 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1807 422 spigot;
#X obj 1807 394 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1846 394 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1807 454 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1179 362 receive Two;
#X obj 1286 362 receive Three;
#X obj 1390 362 receive Four;
#X obj 1492 362 receive Five;
#X obj 1596 362 receive Six;
#X obj 1703 362 receive Seven;
#X obj 1807 362 receive Eight;
#X obj 1079 572 receive One;
#X obj 1079 632 spigot;
#X obj 1079 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1118 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1079 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1183 632 spigot;
#X obj 1183 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1222 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1183 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1290 632 spigot;
#X obj 1290 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1329 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1290 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1394 632 spigot;
#X obj 1394 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1433 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1394 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1496 632 spigot;
#X obj 1496 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1535 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1496 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1600 632 spigot;
#X obj 1600 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1639 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1600 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1707 632 spigot;
#X obj 1707 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1746 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1707 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1811 632 spigot;
#X obj 1811 604 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1850 604 tgl 25 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 1811 664 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 1183 572 receive Two;
#X obj 1290 572 receive Three;
#X obj 1394 572 receive Four;
#X obj 1496 572 receive Five;
#X obj 1600 572 receive Six;
#X obj 1707 572 receive Seven;
#X obj 1811 572 receive Eight;
#X obj 1434 502 send Snare;
#X obj 1439 713 send Hat;
#X obj 446 598 s One;
#X text 106 584 These senders take the remainder of the modulus operator
(plus 1) and set it to a step that can be sent out to receivers. This
makes it so we only need one clock for all the sequencers. The [s]
object at the end is the same as the [send] object \, but it can be
abbreviated. This sends a bang to a [receive] or [r] object that has
the same argument as it., f 47;
#X text 88 743 This is the final part of the sequencer in which the
steps are given to an audio file to play in time. This is using some
drum audio files \, but could easily be attached to a synth envelope
or anything really. Little about the [readsf~] object \, it takes an
open file argument \, and then the number tells it to play. Any non
zero tells it to play and zero tells it to stop. We don't need a zero
as the audio files are short enought to not overlap. It also takes
other arguments like sample rate and stuff but fuck that., f 48;
#X text 1223 77 These are the receivers of the sequencer. They take
the steps from the clock and link them to the audio files. They each
have a spigot that allows you to turn each step on an off.;
#X obj 446 38 loadbang;
#X msg 576 144 1, f 26;
#X msg 576 125 0.5, f 26;
#X msg 576 106 0.25, f 26;
#X msg 576 163 2, f 26;
#X msg 576 182 4, f 26;
#X text 688 183 Whole Note;
#X text 695 164 Half Note;
#X text 674 144 Quarter Note;
#X text 660 106 Sixteenth Note;
#X text 681 125 Eighth Note;
#X msg 576 87 0.125, f 26;
#X text 632 88 Thirty-Second Note;
#X text 612 221 These 3 boxes set (from top to bottom) send the tempo
to the message box which takes it as a variable using the \$1 in the
[tempo] message. Then the message sends it to the metronome and that
sends a bang using that tempo. The message boxes on the right set what
division of the tempo is used. This is done using the \$1 in the [metro]
object.;
#X obj 947 708 vsl 25 150 0 10 0 0 empty empty Volume -9 -9 0 13 -204800
-261234 -1 745 1;
#X obj 870 963 dac~;
#X msg 446 64 120;
#X obj 516 106 loadbang;
#X obj 884 668 loadbang;
#X msg 863 87 \; pd dsp 1;
#X obj 863 59 loadbang;
#X text 834 26 Sets DSP on when patch is loaded.;
#X obj 393 355 bng 40 250 50 0 empty empty Reset 6 20 0 10 -261234
-33289 -1;
#X obj 314 395 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 314 277 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 446 234 metro \$1 120 permin;
#X obj 102 353 gemwin;
#X floatatom 2401 341 5 0 1 0 - - -;
#X floatatom 2482 341 5 0 1 0 - - -;
#X floatatom 2572 341 5 0 1 0 - - -;
#X floatatom 2524 1155 5 0 0 0 - - -;
#X msg 2434 1224 draw line;
#X obj 2401 268 bng 15 250 50 0 empty empty empty 17 7 0 15 -262144
-1 -1;
#X obj 2401 312 * 0.01;
#X obj 2482 312 * 0.01;
#X obj 2572 312 * 0.01;
#X obj 2401 249 r Hat;
#X obj 2524 1080 snapshot~;
#X obj 2610 1061 metro 10;
#X obj 2524 1049 osc~;
#X obj 2527 1025 hsl 128 15 0 10 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 2921 1;
#X obj 2469 525 snapshot~;
#X obj 2555 525 snapshot~;
#X obj 2648 525 snapshot~;
#X obj 2469 549 * 360;
#X obj 2555 549 * 360;
#X obj 2648 549 * 360;
#X floatatom 2469 573 5 0 0 0 - - -;
#X floatatom 2555 573 5 0 0 0 - - -;
#X floatatom 2648 573 5 0 0 0 - - -;
#X obj 2600 767 line;
#X obj 2600 701 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 2600 789 5 0 0 0 - - -;
#X obj 2389 506 metro 24;
#X obj 2676 716 delay 30;
#X obj 2113 767 line;
#X obj 2113 701 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 2113 789 5 0 0 0 - - -;
#X obj 2189 716 delay 30;
#X msg 2676 748 0.5 300;
#X msg 2253 1032 draw line;
#X msg 2189 748 0 500;
#X obj 2253 1013 loadbang;
#X obj 2434 1205 loadbang;
#X obj 2610 1042 loadbang;
#X obj 2389 487 loadbang;
#X obj 2600 674 r Kick;
#X obj 2113 674 r Snare;
#X obj 2524 1131 + 4;
#X msg 2600 748 0 10;
#X obj 2469 499 osc~ 0.1;
#X obj 2555 499 osc~ 0.13;
#X obj 2648 499 osc~ 0.15;
#X obj 2602 1156 r Hat;
#X text 2215 37 VISUAL SEQUENCER USING THE GEM LIBRARY;
#X text 2236 114 This [gemhead] must be at the start of your chain
of effects you want on your final model. The chain of Gem visuals goes:
gemhead \, effects (rotate \, scale \, color \, etc.) \, then model
(cube \, circle \, triangle)., f 35;
#X obj 2401 283 random 101;
#X obj 2482 283 random 101;
#X obj 2572 283 random 101;
#X text 2677 240 What this is doing is randomizing the color everythime
a hi-hat plays. It receives the hat and bangs a [random] object which
spits out a number between 0-100 \, which is converted to a decimal
as that is what the RGB takes. Thus giving you a random value for your
R \, G \, and B every hi-hat., f 37;
#X text 2725 444 This is giving the model random looking rotations
to really spice it up. It uses the LFO's at different speeds for the
X \, Y \, and Z coordinates. It takes that LFO signal and uses [snapshot~]
to convert it to integers. [snapshot~] basically captures then LFO
value at every bang from the [metro] and converts it to an int for
easier use. After you have the integer \, you just times it by 360
(cause circle) and send it to the XYZ., f 38;
#X obj 2524 1106 * 0.15;
#X msg 2524 1006 2.3;
#X obj 2524 987 loadbang;
#X obj 2602 1179 random 41;
#X text 2678 930 This part with all the math operators is a basic little
thing for giving the circle a pulsating effect. It uses and LFO into
the [snapshot~] object to achieve it. The math operators [* 0.15]lower
the amplitude to make the pulsing more subtle and [+ 4] set the integer
floor to 3 so the size doesn' shrink to small (without the envelope).
I'm just sending this size info to the middle inlet of the sphere (right
inlet on triangle and cube) as it is a universal size change. I could've
put the envelope scale change in here as well \, but this way they
are kept separate and this doesn't require as much precision as the
envelope did., f 44;
#X text 2644 1211 What this part going into the right inlet of the
[sphere] object is doing is randomizing how many segments the wireframe
sphere model will have every time the hi-hat is played. It can go from
0-40 (though I think 0 is the same as 1).;
#X obj 11 234 sel 0;
#X obj 102 234 sel 1;
#X msg 102 281 create \, 1;
#X msg 11 334 0 \, destroy;
#X text 9 379 This little bit over here focuses on the [gemwin] object
which is the object for opening up the visual window. To open it you
send the [create \, 1] message (which opens on toggle to sync up with
the track using [sel 1]). It is closed using the [destroy] message
(which is sent when track is stopped using [sel 0]). And the [dimen]
box sets the resolution of the window (which is also set when toggle
is on). I currently have it at 600x4600., f 42;
#X text 2748 646 These two paths are very similar \, just opposites.
What they are doing is making their respective model change size at
either the kick or the snare. One thing to note is that everything
before this splitting point happens to both models so they both rotate
and change color \, but now each effect is individual between the lines.
But back to the effect. Essentially \, it'sjust a basic envelope generator
using the [line] object \, but instead of volume \, we apply it to
the scale object. The right line makes the sphere shrink quickly when
the kick is played and rise back slowly after. For the left \, it makes
the triangle and cube grow quickly \, and shrink back slowly after.
For both of these \, it's universal scaling so the number box goes
to X \, Y \, and Z., f 43;
#X msg 102 300 dimen 600 1280;
#X obj 2602 1202 + 3;
#X floatatom 2602 1225 5 0 0 0 - - -;
#X obj 2156 1042 r Hat;
#X obj 2156 1088 + 3;
#X floatatom 2156 1111 5 0 0 0 - - -;
#X obj 2325 1110 spigot;
#X obj 2364 1095 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X text 2140 1176 This is the end point for the triangle and cube.
They are now a part of the image. I also added the option to put a
cone into the snare hit line cause why not. It's turned on and off
using the [spigot] object with the toggle box., f 28;
#X msg 2113 748 6.5 30;
#X obj 2156 1065 random 10;
#X obj 1018 870 hsl 128 15 0 1 0 0 empty empty Clip_Level 29 -9 0 13
-261234 -204800 -1 6350 1;
#X floatatom 1015 908 5 0 0 0 - - -;
#X obj 976 885 * -1;
#X floatatom 976 908 5 0 0 0 - - -;
#X obj 882 879 *~;
#X obj 1015 832 loadbang;
#X msg 1015 851 0.5;
#N canvas 0 22 450 278 (subpatch) 0;
#X array outputArray 500 float 1;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#X coords 0 1 499 -1 200 140 1;
#X restore 533 972 graph;
#X obj 648 945 tabwrite~ outputArray;
#X obj 648 907 loadbang;
#X obj 648 926 metro 100;
#X msg 884 687 0.5;
#X floatatom 947 861 5 0 0 0 - - -;
#X obj 882 926 clip~ -0.5 0.5;
#X obj 393 972 tgl 140 0 empty empty Start/Stop 11 -13 0 20 -232576
-262130 -260097 0 1;
#X text 1002 932 This is a final section for clipping the audio using
the [clip~] object. It basically sets a clipping threshold for any
incoming audio. I set it for -0.5 to 0.5 by default \, but it can be
lowered with the slider. It won't clip right away as the audio is set
to 0.5 using the volume slider \, but it will start distorting when
the volume is raised. I also put in an output array for monitoring
clipping and just some more visual feedback besides the Gem display.
;
#X obj 249 62 declare -lib Gem;
#X obj 2325 359 colorRGB;
#X obj 2325 591 rotateXYZ;
#X obj 2325 807 scaleXYZ;
#X obj 2505 807 scaleXYZ;
#X obj 2325 1051 triangle;
#X obj 2325 1070 cube;
#X obj 2325 1129 cone;
#X obj 2505 1243 sphere;
#X obj 2325 213 gemhead;
#X connect 0 0 18 0;
#X connect 0 0 204 0;
#X connect 0 0 266 0;
#X connect 0 0 267 0;
#X connect 1 0 4 0;
#X connect 2 0 204 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 7 0 9 0;
#X connect 7 0 16 0;
#X connect 7 0 15 0;
#X connect 7 0 14 0;
#X connect 7 0 13 0;
#X connect 7 0 12 0;
#X connect 7 0 11 0;
#X connect 7 0 10 0;
#X connect 8 0 7 0;
#X connect 9 0 23 0;
#X connect 10 0 24 0;
#X connect 11 0 25 0;
#X connect 12 0 26 0;
#X connect 13 0 27 0;
#X connect 14 0 28 0;
#X connect 15 0 29 0;
#X connect 16 0 30 0;
#X connect 17 0 8 0;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 4 0;
#X connect 21 0 19 0;
#X connect 23 0 175 0;
#X connect 24 0 31 0;
#X connect 25 0 32 0;
#X connect 26 0 33 0;
#X connect 27 0 34 0;
#X connect 28 0 35 0;
#X connect 29 0 36 0;
#X connect 30 0 37 0;
#X connect 39 0 42 0;
#X connect 40 0 43 0;
#X connect 41 0 44 0;
#X connect 42 0 45 0;
#X connect 43 0 48 0;
#X connect 44 0 49 0;
#X connect 45 0 47 0;
#X connect 47 0 287 0;
#X connect 48 0 50 0;
#X connect 49 0 51 0;
#X connect 50 0 287 0;
#X connect 51 0 287 0;
#X connect 52 0 54 0;
#X connect 53 0 56 0;
#X connect 54 0 53 0;
#X connect 55 0 53 1;
#X connect 56 0 85 0;
#X connect 57 0 60 0;
#X connect 58 0 57 0;
#X connect 59 0 57 1;
#X connect 60 0 85 0;
#X connect 61 0 64 0;
#X connect 62 0 61 0;
#X connect 63 0 61 1;
#X connect 64 0 85 0;
#X connect 65 0 68 0;
#X connect 66 0 65 0;
#X connect 67 0 65 1;
#X connect 68 0 85 0;
#X connect 69 0 72 0;
#X connect 70 0 69 0;
#X connect 71 0 69 1;
#X connect 72 0 85 0;
#X connect 73 0 76 0;
#X connect 74 0 73 0;
#X connect 75 0 73 1;
#X connect 76 0 85 0;
#X connect 77 0 80 0;
#X connect 78 0 77 0;
#X connect 79 0 77 1;
#X connect 80 0 85 0;
#X connect 81 0 84 0;
#X connect 82 0 81 0;
#X connect 83 0 81 1;
#X connect 84 0 85 0;
#X connect 86 0 58 0;
#X connect 87 0 62 0;
#X connect 88 0 66 0;
#X connect 89 0 70 0;
#X connect 90 0 74 0;
#X connect 91 0 78 0;
#X connect 92 0 82 0;
#X connect 93 0 95 0;
#X connect 94 0 97 0;
#X connect 95 0 94 0;
#X connect 96 0 94 1;
#X connect 97 0 173 0;
#X connect 98 0 101 0;
#X connect 99 0 98 0;
#X connect 100 0 98 1;
#X connect 101 0 173 0;
#X connect 102 0 105 0;
#X connect 103 0 102 0;
#X connect 104 0 102 1;
#X connect 105 0 173 0;
#X connect 106 0 109 0;
#X connect 107 0 106 0;
#X connect 108 0 106 1;
#X connect 109 0 173 0;
#X connect 110 0 113 0;
#X connect 111 0 110 0;
#X connect 112 0 110 1;
#X connect 113 0 173 0;
#X connect 114 0 117 0;
#X connect 115 0 114 0;
#X connect 116 0 114 1;
#X connect 117 0 173 0;
#X connect 118 0 121 0;
#X connect 119 0 118 0;
#X connect 120 0 118 1;
#X connect 121 0 173 0;
#X connect 122 0 125 0;
#X connect 123 0 122 0;
#X connect 124 0 122 1;
#X connect 125 0 173 0;
#X connect 126 0 99 0;
#X connect 127 0 103 0;
#X connect 128 0 107 0;
#X connect 129 0 111 0;
#X connect 130 0 115 0;
#X connect 131 0 119 0;
#X connect 132 0 123 0;
#X connect 133 0 135 0;
#X connect 134 0 137 0;
#X connect 135 0 134 0;
#X connect 136 0 134 1;
#X connect 137 0 174 0;
#X connect 138 0 141 0;
#X connect 139 0 138 0;
#X connect 140 0 138 1;
#X connect 141 0 174 0;
#X connect 142 0 145 0;
#X connect 143 0 142 0;
#X connect 144 0 142 1;
#X connect 145 0 174 0;
#X connect 146 0 149 0;
#X connect 147 0 146 0;
#X connect 148 0 146 1;
#X connect 149 0 174 0;
#X connect 150 0 153 0;
#X connect 151 0 150 0;
#X connect 152 0 150 1;
#X connect 153 0 174 0;
#X connect 154 0 157 0;
#X connect 155 0 154 0;
#X connect 156 0 154 1;
#X connect 157 0 174 0;
#X connect 158 0 161 0;
#X connect 159 0 158 0;
#X connect 160 0 158 1;
#X connect 161 0 174 0;
#X connect 162 0 165 0;
#X connect 163 0 162 0;
#X connect 164 0 162 1;
#X connect 165 0 174 0;
#X connect 166 0 139 0;
#X connect 167 0 143 0;
#X connect 168 0 147 0;
#X connect 169 0 151 0;
#X connect 170 0 155 0;
#X connect 171 0 159 0;
#X connect 172 0 163 0;
#X connect 179 0 195 0;
#X connect 180 0 204 1;
#X connect 181 0 204 1;
#X connect 182 0 204 1;
#X connect 183 0 204 1;
#X connect 184 0 204 1;
#X connect 190 0 204 1;
#X connect 193 0 295 0;
#X connect 195 0 3 0;
#X connect 196 0 181 0;
#X connect 197 0 294 0;
#X connect 199 0 198 0;
#X connect 201 0 202 0;
#X connect 202 0 203 0;
#X connect 203 0 20 0;
#X connect 204 0 1 0;
#X connect 206 0 300 1;
#X connect 207 0 300 2;
#X connect 208 0 300 3;
#X connect 209 0 307 1;
#X connect 210 0 307 0;
#X connect 211 0 255 0;
#X connect 211 0 256 0;
#X connect 211 0 257 0;
#X connect 212 0 206 0;
#X connect 213 0 207 0;
#X connect 214 0 208 0;
#X connect 215 0 211 0;
#X connect 216 0 260 0;
#X connect 217 0 216 0;
#X connect 218 0 216 0;
#X connect 219 0 218 0;
#X connect 220 0 223 0;
#X connect 221 0 224 0;
#X connect 222 0 225 0;
#X connect 223 0 226 0;
#X connect 224 0 227 0;
#X connect 225 0 228 0;
#X connect 226 0 301 1;
#X connect 227 0 301 2;
#X connect 228 0 301 3;
#X connect 229 0 231 0;
#X connect 230 0 248 0;
#X connect 230 0 233 0;
#X connect 231 0 303 2;
#X connect 231 0 303 3;
#X connect 231 0 303 1;
#X connect 232 0 220 0;
#X connect 232 0 221 0;
#X connect 232 0 222 0;
#X connect 233 0 238 0;
#X connect 234 0 236 0;
#X connect 235 0 281 0;
#X connect 235 0 237 0;
#X connect 236 0 302 2;
#X connect 236 0 302 3;
#X connect 236 0 302 1;
#X connect 237 0 240 0;
#X connect 238 0 229 0;
#X connect 239 0 304 0;
#X connect 239 0 305 0;
#X connect 239 0 306 0;
#X connect 240 0 234 0;
#X connect 241 0 239 0;
#X connect 242 0 210 0;
#X connect 243 0 217 0;
#X connect 244 0 232 0;
#X connect 245 0 230 0;
#X connect 246 0 235 0;
#X connect 247 0 209 0;
#X connect 248 0 229 0;
#X connect 249 0 220 0;
#X connect 250 0 221 0;
#X connect 251 0 222 0;
#X connect 252 0 263 0;
#X connect 255 0 212 0;
#X connect 256 0 213 0;
#X connect 257 0 214 0;
#X connect 260 0 247 0;
#X connect 261 0 219 0;
#X connect 262 0 261 0;
#X connect 263 0 273 0;
#X connect 266 0 269 0;
#X connect 267 0 268 0;
#X connect 267 0 272 0;
#X connect 268 0 205 0;
#X connect 269 0 205 0;
#X connect 272 0 205 0;
#X connect 273 0 274 0;
#X connect 274 0 307 2;
#X connect 275 0 282 0;
#X connect 276 0 277 0;
#X connect 277 0 306 2;
#X connect 278 0 306 0;
#X connect 279 0 278 1;
#X connect 281 0 234 0;
#X connect 282 0 276 0;
#X connect 283 0 284 0;
#X connect 283 0 285 0;
#X connect 284 0 296 2;
#X connect 285 0 286 0;
#X connect 286 0 296 1;
#X connect 287 0 296 0;
#X connect 288 0 289 0;
#X connect 289 0 283 0;
#X connect 292 0 293 0;
#X connect 293 0 291 0;
#X connect 294 0 193 0;
#X connect 295 0 287 1;
#X connect 296 0 194 0;
#X connect 296 0 194 1;
#X connect 296 0 291 0;
#X connect 297 0 0 0;
#X connect 300 0 301 0;
#X connect 301 0 302 0;
#X connect 301 0 303 0;
#X connect 302 0 304 0;
#X connect 302 0 305 0;
#X connect 303 0 307 0;
#X connect 305 0 278 0;
#X connect 308 0 300 0;
